import React, { useEffect, useMemo, useState } from "react";
import { View, Text, TextInput, TouchableHighlight } from "react-native";
import styled from "styled-components/native";
import Box from "../components/Box";
import Header from "../components/Header";
import Page from "../components/Page";
// import { Canvas, useFrame } from "@react-three/fiber";
import { Room } from "../components/Room";
// import {
//   OrbitControls,
//   PerspectiveCamera,
//   softShadows,
// } from "@react-three/drei";
// import { useControls } from "leva";
import Scene from "../components/Scene";
import SearchResults from "../components/SearchResults";
import { createStackNavigator } from "@react-navigation/stack";
import {
  AnimeMediaFragment,
  AnimesDocument,
  fetcher,
  Maybe,
  useAnimesQuery,
} from "../generated/graphql";
import { ANILIST_ENDPOINT } from "../constants/queryConfigs";
import debounce from "lodash.debounce";
import { useInfiniteGraphQLQuery } from "../util/useInfiniteGraphQLQuery";
import { useQueryClient } from "react-query";
const Stack = createStackNavigator();

// softShadows();

const StyledInput = styled(TextInput)`
  height: 50px;
  padding: 0 15px;
  border-radius: 3px;
  border: 1px solid #9fa5aa;
`;

interface Props {}

const Home = (props: Props) => {
  const [text, setText] = useState("");
  const [show3D, setShow3D] = useState(false);

  const queryClient = useQueryClient();

  const { fetchNextPage, hasNextPage, data, isLoading, refetch } =
    useInfiniteGraphQLQuery(
      useAnimesQuery, // this is a hook generated by typescript-react-query
      ({ pageParam = 1 }) => ({
        page: pageParam,
        name: text,
      }),
      {
        enabled: false,
        initialData: { pages: [], pageParams: [] },
        getNextPageParam: (lastPage, pages) => {
          const result = lastPage?.Page?.pageInfo?.hasNextPage
            ? lastPage?.Page?.pageInfo?.currentPage
              ? lastPage?.Page?.pageInfo?.currentPage + 1
              : lastPage?.Page?.pageInfo?.currentPage
            : undefined;

          return result;
        },
      }
    );

  // if (!isLoading) {
  //   console.log(data?.pages);
  // }

  const debouncedRefetch = useMemo(
    () =>
      debounce(() => {
        queryClient.resetQueries("animes", { exact: true });

        refetch();
      }, 250),
    [refetch]
  );

  useEffect(() => {
    if (!!text) {
      debouncedRefetch();
    }
  }, [text]);

  const result = data?.pages?.reduce((acc, current) => {
    return [
      ...acc,
      ...(current.Page?.media?.filter((media) => {
        return (
          media?.title?.romaji?.toLowerCase()?.includes(text.toLowerCase()) ||
          media?.title?.english?.toLowerCase()?.includes(text.toLowerCase())
        );
      }) || []),
    ];
  }, [] as (AnimeMediaFragment | null)[]);

  return (
    <Page>
      <Header />
      <View
        style={{
          marginTop: 15,
          maxHeight: "100%",
          height: "100%",
          overflow: "hidden",
        }}
      >
        <View>
          <StyledInput
            onChangeText={(text: string) => {
              setText(text);
            }}
            value={text}
            placeholder={"Search for Anime"}
            placeholderTextColor={"#ADB2B6"}
          />
        </View>
        <View
          style={{
            display: "flex",
            flexDirection: "row",
            width: "100%",
            justifyContent: "space-around",
            marginTop: 15,
            height: 50,
          }}
        >
          <TouchableHighlight
            onPress={() => {
              setShow3D(false);
            }}
            underlayColor="#DDDDDD"
            style={{
              width: "50%",
              height: "100%",
              // border: "1px solid #EEEEEE",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              backgroundColor: !show3D ? "#A6A6A6" : "transparent",
            }}
          >
            <Text style={{ fontWeight: "500", color: "#4A4A4A" }}>2D</Text>
          </TouchableHighlight>
          <TouchableHighlight
            onPress={() => {
              setShow3D(true);
            }}
            underlayColor="#DDDDDD"
            style={{
              width: "50%",
              height: "100%",
              // border: "1px solid #EEEEEE",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              backgroundColor: show3D ? "#A6A6A6" : "transparent",
            }}
          >
            <Text style={{ fontWeight: "500", color: "#4A4A4A" }}>3D</Text>
          </TouchableHighlight>
        </View>
        {/* results */}
        {show3D ? null : (
          // <View></View>
          // <Canvas shadows style={{ height: "100%", width: "100vw", flex: 1 }}>
          //   {/* <Scene /> */}
          // </Canvas>
          <SearchResults
            fetchNextPage={() => {
              // if (hasNextPage) {
              return fetchNextPage();
              // }
            }}
            hasNextPage={!!hasNextPage}
            results={result}
          />
        )}
      </View>
    </Page>
  );
};

export default Home;
