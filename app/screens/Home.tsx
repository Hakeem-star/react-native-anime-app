import React, { useEffect, useMemo, useState } from "react";
import { View, Text, TextInput, TouchableHighlight } from "react-native";
import styled from "styled-components/native";
// import Box from "../components/Box";
import Header from "../components/Header";
import Page from "../components/Page";
// import { Canvas, useFrame } from "@react-three/fiber";
// import { Room } from "../components/Room";
// import {
//   OrbitControls,
//   PerspectiveCamera,
//   softShadows,
// } from "@react-three/drei";
// import { useControls } from "leva";
// import Scene from "../components/Scene";
import SearchResults from "../components/SearchResults";
import { createStackNavigator } from "@react-navigation/stack";
import {
  AnimeMediaFragment,
  AnimesDocument,
  fetcher,
  Maybe,
  useAnimesQuery,
} from "../generated/graphql";
import { ANILIST_ENDPOINT } from "../constants/queryConfigs";
import debounce from "lodash.debounce";
import { useInfiniteGraphQLQuery } from "../util/useInfiniteGraphQLQuery";
import { useQueryClient } from "react-query";
import { ResultTabs } from "../navigation/ResultTabs";
import { RootStackProps } from "../App";
const Stack = createStackNavigator();

// softShadows();

const StyledInput = styled(TextInput)`
  height: 50px;
  padding: 0 15px;
  border-radius: 3px;
  border: 1px solid #9fa5aa;
`;

interface Props {}

const Home = ({ navigation, route }: RootStackProps) => {
  const [text, setText] = useState("");
  // const [show3D, setShow3D] = useState(false);

  // const queryClient = useQueryClient();

  // const { fetchNextPage, hasNextPage, data, isLoading, refetch } =
  //   useInfiniteGraphQLQuery(
  //     useAnimesQuery, // this is a hook generated by typescript-react-query
  //     ({ pageParam = 1 }) => ({
  //       page: pageParam,
  //       name: text,
  //     }),
  //     {
  //       enabled: false,
  //       initialData: { pages: [], pageParams: [] },
  //       getNextPageParam: (lastPage, pages) => {
  //         const result = lastPage?.Page?.pageInfo?.hasNextPage
  //           ? lastPage?.Page?.pageInfo?.currentPage
  //             ? lastPage?.Page?.pageInfo?.currentPage + 1
  //             : lastPage?.Page?.pageInfo?.currentPage
  //           : undefined;

  //         return result;
  //       },
  //     }
  //   );

  // const debouncedRefetch = useMemo(
  //   () =>
  //     debounce(() => {
  //       queryClient.resetQueries("animes", { exact: true });

  //       refetch();
  //     }, 250),
  //   [refetch]
  // );

  // useEffect(() => {
  //   if (!!text) {
  //     debouncedRefetch();
  //   }
  // }, [text]);

  // const result = data?.pages?.reduce((acc, current) => {
  //   return [
  //     ...acc,
  //     ...(current.Page?.media?.filter((media) => {
  //       return (
  //         media?.title?.romaji?.toLowerCase()?.includes(text.toLowerCase()) ||
  //         media?.title?.english?.toLowerCase()?.includes(text.toLowerCase())
  //       );
  //     }) || []),
  //   ];
  // }, [] as (AnimeMediaFragment | null)[]);

  return (
    <Page>
      <View
        style={{
          marginTop: 15,
          maxHeight: "100%",
          height: "100%",
          overflow: "hidden",
        }}
      >
        {!!route?.params?.showSearchBar && (
          <View style={{ paddingHorizontal: 20 }}>
            <StyledInput
              onChangeText={(text: string) => {
                setText(text);
              }}
              value={text}
              placeholder={"Search for Anime"}
              placeholderTextColor={"#ADB2B6"}
            />
          </View>
        )}
      </View>
    </Page>
  );
};

export default Home;

// {show3D ? null : (
//   // <View></View>
//   // <Canvas shadows style={{ height: "100%", width: "100vw", flex: 1 }}>
//   //   {/* <Scene /> */}
//   // </Canvas>
//   <SearchResults
//     fetchNextPage={() => {
//       // if (hasNextPage) {
//       return fetchNextPage();
//       // }
//     }}
//     hasNextPage={!!hasNextPage}
//     results={result}
//   />
// )}
