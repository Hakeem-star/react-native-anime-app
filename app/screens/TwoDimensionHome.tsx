import React, { useEffect, useMemo, useRef, useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableHighlight,
  FlatList,
  Animated,
} from "react-native";
import styled from "styled-components/native";
import Header from "../components/Header";
import Page from "../components/Page";

import SearchResults from "../components/SearchResults";
import { createStackNavigator } from "@react-navigation/stack";
import {
  AnimeMediaFragment,
  AnimesDocument,
  CoverImageFragment,
  fetcher,
  Maybe,
  useAnimesQuery,
} from "../generated/graphql";
import { ANILIST_ENDPOINT } from "../constants/queryConfigs";
import debounce from "lodash.debounce";
import { useInfiniteGraphQLQuery } from "../util/useInfiniteGraphQLQuery";
import { useQueryClient } from "react-query";
import { ResultTabs } from "../navigation/ResultTabs";
import { RootStackProps } from "../App";
import AnimeResult from "../components/TwoDimension/AnimeResult";
import { Gyroscope, ThreeAxisMeasurement } from "expo-sensors";

const Stack = createStackNavigator();

const StyledInput = styled(TextInput)`
  height: 50px;
  padding: 0 15px;
  border-radius: 3px;
  border: 1px solid #9fa5aa;
`;

interface Props {}

const TwoDimensionHome = ({ navigation, route }: RootStackProps) => {
  const [text, setText] = useState("");

  const [subscription, setSubscription] = useState<ReturnType<
    typeof Gyroscope.addListener
  > | null>(null);
  const [gyroData, setGyroData] = useState<ThreeAxisMeasurement>({
    x: 0,
    y: 0,
    z: 0,
  });

  const queryClient = useQueryClient();

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener((gyroscopeData) => {
        setGyroData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    Gyroscope.setUpdateInterval(500);

    _subscribe();
    return () => _unsubscribe();
  }, []);

  const { fetchNextPage, hasNextPage, data, isLoading, refetch } =
    useInfiniteGraphQLQuery(
      useAnimesQuery, // this is a hook generated by typescript-react-query
      ({ pageParam = 1 }) => ({
        page: pageParam,
        name: text,
      }),
      {
        enabled: false,
        initialData: { pages: [], pageParams: [] },
        getNextPageParam: (lastPage, pages) => {
          const result = lastPage?.Page?.pageInfo?.hasNextPage
            ? lastPage?.Page?.pageInfo?.currentPage
              ? lastPage?.Page?.pageInfo?.currentPage + 1
              : lastPage?.Page?.pageInfo?.currentPage
            : undefined;

          return result;
        },
      }
    );

  const debouncedRefetch = useMemo(
    () =>
      debounce(() => {
        queryClient.resetQueries("animes", { exact: true });

        refetch();
      }, 20),
    [refetch]
  );

  useEffect(() => {
    if (text) {
      debouncedRefetch();
    }
  }, [text]);

  const result = useMemo(
    () =>
      data?.pages?.reduce((acc, current) => {
        return [
          ...acc,
          ...(current.Page?.media?.filter((media) => {
            return (
              !!media &&
              (media?.title?.romaji
                ?.toLowerCase()
                ?.includes(text.toLowerCase()) ||
                media?.title?.english
                  ?.toLowerCase()
                  ?.includes(text.toLowerCase()))
            );
          }) || []),
        ];
      }, [] as ((AnimeMediaFragment & CoverImageFragment) | null)[]),
    [data]
  );

  //extract to hook TODO
  const x = useRef(new Animated.Value(0)).current;
  const y = useRef(new Animated.Value(0)).current;
  const z = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    if (gyroData.y !== 0) {
      Animated.spring(x, {
        toValue: -gyroData.x,
        useNativeDriver: false,
        //  delay: Math.random() * 50,
        stiffness: 18,
        damping: 2,
        mass: 1,
      }).start();

      Animated.spring(y, {
        toValue: -gyroData.y,
        useNativeDriver: false,
        //  delay: Math.random() * 300,
        stiffness: 100,
        damping: 2,
        mass: 1,
      }).start();

      Animated.spring(z, {
        toValue: -gyroData.z,
        useNativeDriver: false,
        //  delay: Math.random() * 100,
        stiffness: 18,
        damping: 2,
        mass: 1,
      }).start();
    }
  }, [gyroData]);

  const xInterpolate = x.interpolate({
    inputRange: [-5, 0, 5],
    outputRange: ["-10deg", "0deg", "10deg"],
    extrapolate: "extend",
  });

  const yInterpolate = y.interpolate({
    inputRange: [-5, 0, 5],
    outputRange: ["-10deg", "0deg", "10deg"],
    extrapolate: "extend",
  });
  const zInterpolate = z.interpolate({
    inputRange: [-10, 0, 10],
    outputRange: ["-5deg", "0deg", "5deg"],
    extrapolate: "extend",
  });

  const vals = { xInterpolate, yInterpolate, zInterpolate };

  return (
    <Page>
      <View
        style={{
          marginTop: 15,
          maxHeight: "100%",
          height: "100%",
          overflow: "hidden",

          display: "flex",
          alignItems: "center",
        }}
      >
        {!!route?.params?.showSearchBar && (
          <View style={{ paddingHorizontal: 20, width: "100%" }}>
            <StyledInput
              autoFocus
              onChangeText={(text: string) => {
                setText(text);
              }}
              value={text}
              placeholder={"Search for Anime"}
              placeholderTextColor={"#ADB2B6"}
            />
          </View>
        )}

        <FlatList
          onEndReached={() => {
            queryClient.resetQueries("animes", { exact: true });

            fetchNextPage();
          }}
          style={{ marginTop: 20 }}
          contentContainerStyle={{
            display: "flex",
            alignItems: "flex-start",
            paddingBottom: 50,
          }}
          data={result}
          renderItem={(item) =>
            item.item ? (
              <AnimeResult
                styles={vals}
                anime={item.item}
                rotation={gyroData}
              />
            ) : null
          }
          numColumns={2}
          horizontal={false}
        />
      </View>
    </Page>
  );
};

export default TwoDimensionHome;
